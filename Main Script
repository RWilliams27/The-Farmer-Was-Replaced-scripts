gridSizeX = 7
gridSizeY = 7
pumpkinX = 4
pumpkinY = 4

pumpkinCounter = 0
pumpkinSwitch = 0

def reset():
	if get_pos_x() != 0:
		clear()
		for i in range(gridSizeX - 1):
			move(North)
	elif get_pos_y() != 6:
		clear()
		for i in range(gridSizeY - 1):
			move(North)
			
def trader():
	#for this to work, you need to define gridSizeX & gridSizeY	
	if num_items(Items.Wood) >= 2 * 16:		
		trade(Items.Carrot_Seed, (16 - num_items(Items.Carrot_Seed)))
	while num_items(Items.Empty_Tank) + num_items(Items.Water_Tank) <= gridSizeX * gridSizeX:
		trade(Items.Empty_Tank)
	while num_items(Items.Pumpkin_Seed) <= pumpkinX * pumpkinY:
		trade(Items.Pumpkin_Seed)	

def watering():
	waterLevel = get_water()
	if waterLevel <= 0.2:
		use_item(Items.Water_Tank)
		
def carrotRange():
	if get_pos_x() <= 2 and get_pos_y() >= 3: 		
		return True
def carrot():
	if carrotRange():
		if get_ground_type() != Grounds.Soil:
			till()		
			plant(Entities.Carrots)		
		elif get_entity_type() == None:
			plant(Entities.Carrots)
		elif can_harvest():
			harvest()
			plant(Entities.Carrots)
		
def pumpkinRange():
	if get_pos_x() >= 3 and get_pos_y() >= 3:
		return True
		
def pumpkin():
	if pumpkinRange():
		if get_ground_type() != Grounds.Soil:
			till()		
			plant(Entities.Pumpkin)		
		elif get_entity_type() == None:
			plant(Entities.Pumpkin)
		elif can_harvest() == True and pumpkinCounter == (pumpkinX * pumpkinY) - 1: 
			harvest()
			plant(Entities.Pumpkin)
			return True
		
def treeRange():
	if get_pos_x() >= 0 and get_pos_y()  <= 2:
		return True
		
def tree():
	if treeRange():
		if get_pos_x() % 2 == 0 and get_pos_y() % 2 == 0:
			if can_harvest():
				harvest()
				plant(Entities.Tree)
			elif get_entity_type() == None:
				plant(Entities.Tree)
		if get_pos_x() % 2 != 0 and get_pos_y() % 2 != 0:
			if can_harvest():
				harvest()
				plant(Entities.Tree)
			elif get_entity_type() == None:
				plant(Entities.Tree)
								
while True:
	reset()
	trader()
	
	for i in range(gridSizeX):
		for k in range(gridSizeY):
			move(North)
			watering()
			carrot()
			tree()
			if pumpkin():
				pass
			elif pumpkinRange():
				pumpkinCounter += 1

			elif get_entity_type() == Entities.Grass:
				harvest()
				
		move(East)	
	
	if pumpkinSwitch >= 2:
		pumpkinCounter = 0
		pumpkinSwitch = 0
	else:
		pumpkinSwitch += 1 
