gridSizeX = 4
gridSizeY = 4
pumpkinX = 2
pumpkinY = 2

pumpkinCounter = 0
pumpkinSwitch = 0

def reset():
	if get_pos_x() != 0:
		clear()
		for i in range(gridSizeX - 1):
			move(North)
	elif get_pos_y() != 3:
		clear()
		for i in range(gridSizeY - 1):
			move(North)
def trader():
	#for this to work, you need to define gridSizeX & gridSizeY	
	while num_items(Items.Carrot_Seed) <= 0:
		trade(Items.Carrot_Seed)
	while num_items(Items.Empty_Tank) + num_items(Items.Water_Tank) <= gridSizeX * gridSizeX:
		trade(Items.Empty_Tank)
	while num_items(Items.Pumpkin_Seed) <= (gridSizeX * gridSizeY) + 1:
		trade(Items.Pumpkin_Seed)

def pumpkinRange():
	if get_pos_x() >= pumpkinX and get_pos_y() >= pumpkinY:
		return True 
		
def pumpkin():
	if get_ground_type() != Grounds.Soil:
		till()		
		plant(Entities.Pumpkin)		
	elif get_entity_type() == None:
		plant(Entities.Pumpkin)
	elif can_harvest() == True and pumpkinCounter == (pumpkinX * pumpkinY) - 1: 
		harvest()
		plant(Entities.Pumpkin)
		return True
	
		
while True:
	reset()
	trader()
	
	for i in range(gridSizeX):
		for k in range(gridSizeY):
			move(North)
			quick_print(pumpkinCounter)	
			if pumpkinRange():
				if pumpkin():
					pass
				else:
					pumpkinCounter += 1

			
		
		move(East) 	
	if pumpkinSwitch >= 2:
		pumpkinCounter = 0
		pumpkinSwitch = 0
	else:
		pumpkinSwitch += 1

	quick_print("The switch is ", pumpkinSwitch)
	
